export declare function useApi<D = ReactUseApi.SingleData>(config: ReactUseApi.SingleConfig | string, opt?: ReactUseApi.Options | ReactUseApi.Options['handleData']): [D, ReactUseApi.State, ReactUseApi.RequestFn];
export declare function useApi<D = ReactUseApi.SingleData[]>(config: ReactUseApi.MultiConfigs, opt?: ReactUseApi.Options | ReactUseApi.Options['handleData']): [D, ReactUseApi.State, ReactUseApi.RequestFn];
export declare const reducer: (state: ReactUseApi.State, action: ReactUseApi.Action) => ReactUseApi.State;
export declare const fetchApi: (context: ReactUseApi.Context, config: ReactUseApi.Config, options: ReactUseApi.Options, dispatch: React.Dispatch<ReactUseApi.Action>, revalidate?: boolean) => Promise<void>;
export declare const handleUseApiOptions: (opt: ReactUseApi.Options | ReactUseApi.Options['handleData'] | ReactUseApi.Options['watch'], settings: ReactUseApi.Settings, config: ReactUseApi.Config | string, cacheKey: string) => import("./typings").Options;
export declare const verifyConfig: (config: ReactUseApi.Config) => boolean;
export default useApi;
