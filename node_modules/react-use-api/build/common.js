"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isNil = exports.isFunction = exports.isObject = exports.getResponseData = exports.tidyResponse = exports.axiosAll = exports.configure = exports.initState = exports.ACTIONS = exports.defaultSettings = void 0;
var axios_1 = __importDefault(require("axios"));
var lru_cache_1 = __importDefault(require("lru-cache"));
// export const cacheKeySymbol: unique symbol = Symbol('cacheKey') TS still not friendly to symbol...
exports.defaultSettings = {
    cache: new lru_cache_1.default(),
    axios: axios_1.default,
    maxRequests: 100,
    useCacheData: true,
    alwaysUseCache: false,
    clearLastCacheWhenConfigChanges: true,
    debug: false,
    clientCacheVar: '__USE_API_CACHE__',
    isSSR: function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return typeof window === 'undefined';
    },
    renderSSR: function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return '';
    },
    shouldUseApiCache: function (config, cacheKey) { return true; },
};
exports.ACTIONS = {
    REQUEST_START: 'REQUEST_START',
    REQUEST_END: 'REQUEST_END',
};
exports.initState = {
    loading: false,
    fromCache: false,
    $cacheKey: '',
};
exports.configure = function (context, isSSR) {
    if (isSSR === void 0) { isSSR = false; }
    if (context.isConfigured) {
        return context;
    }
    var custom = context.settings;
    var settings = __assign({}, exports.defaultSettings);
    if (exports.isObject(custom)) {
        Object.keys(custom).forEach(function (key) {
            var value = custom[key];
            if (exports.defaultSettings.hasOwnProperty(key) && !exports.isNil(value)) {
                // @ts-ignore
                settings[key] = value;
            }
        });
    }
    isSSR =
        isSSR !== true && exports.isFunction(settings.isSSR) ? !!settings.isSSR() : isSSR;
    Object.assign(context, {
        settings: settings,
        isSSR: isSSR,
        isConfigured: true,
        collection: {
            ssrConfigs: [],
            cacheKeys: new Set(),
        },
        clearCache: function () {
            var _a;
            (_a = settings === null || settings === void 0 ? void 0 : settings.cache) === null || _a === void 0 ? void 0 : _a.reset();
        },
    });
    return context;
};
function axiosAll(context, config) {
    return __awaiter(this, void 0, void 0, function () {
        var client, isMulti, requests, responses, response, error_1, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    client = context.settings.axios;
                    isMulti = Array.isArray(config);
                    requests = (isMulti
                        ? config
                        : [config]).map(function (cfg) { return client(cfg); });
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, Promise.all(requests)];
                case 2:
                    responses = _a.sent();
                    responses.forEach(exports.tidyResponse);
                    response = responses.length === 1 ? responses[0] : responses;
                    return [2 /*return*/, response];
                case 3:
                    error_1 = _a.sent();
                    response = error_1.response;
                    if (response) {
                        exports.tidyResponse(response);
                    }
                    throw error_1;
                case 4: return [2 /*return*/];
            }
        });
    });
}
exports.axiosAll = axiosAll;
// for cache
exports.tidyResponse = function (response) {
    if (response) {
        delete response.config;
        delete response.request;
    }
    return response;
};
exports.getResponseData = function (options, state) {
    var response = state.response;
    var isMultiApis = Array.isArray(response);
    var data = isMultiApis
        ? response.map(function (each) { return each.data; })
        : response.data;
    var handleData = options.handleData;
    if (exports.isFunction(handleData)) {
        data = handleData(data, state);
    }
    return data;
};
exports.isObject = function (target) {
    return !!target && Object.prototype.toString.call(target) === '[object Object]';
};
exports.isFunction = function (target) {
    return !!target && typeof target === 'function';
};
exports.isNil = function (value) {
    return value === undefined || value === null || value === '';
};
//# sourceMappingURL=common.js.map